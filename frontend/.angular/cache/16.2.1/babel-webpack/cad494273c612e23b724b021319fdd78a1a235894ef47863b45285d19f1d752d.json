{"ast":null,"code":"var _class;\nimport { of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.isLoggedIn = false;\n    // store the URL so we can redirect after logging in\n    this.redirectUrl = null;\n  }\n  login() {\n    return of(true).pipe(delay(1000), tap(() => this.isLoggedIn = true));\n  }\n  logout() {\n    this.isLoggedIn = false;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","tap","delay","AuthService","constructor","isLoggedIn","redirectUrl","login","pipe","logout","factory","ɵfac","providedIn"],"sources":["/Users/santiago.valenzuela/Desktop/Easy Media/frontend/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class AuthService {\n\tisLoggedIn = false;\n\n\t// store the URL so we can redirect after logging in\n\tredirectUrl: string | null = null;\n\n\tlogin(): Observable<boolean> {\n\t\treturn of(true).pipe(\n\t\t\tdelay(1000),\n\t\t\ttap(() => (this.isLoggedIn = true))\n\t\t);\n\t}\n\n\tlogout(): void {\n\t\tthis.isLoggedIn = false;\n\t}\n}\n"],"mappings":";AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,KAAK,QAAQ,gBAAgB;;AAK3C,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAIC,KAAAC,UAAU,GAAG,KAAK;IAElB;IACA,KAAAC,WAAW,GAAkB,IAAI;;EAEjCC,KAAKA,CAAA;IACJ,OAAOP,EAAE,CAAC,IAAI,CAAC,CAACQ,IAAI,CACnBN,KAAK,CAAC,IAAI,CAAC,EACXD,GAAG,CAAC,MAAO,IAAI,CAACI,UAAU,GAAG,IAAK,CAAC,CACnC;EACF;EAEAI,MAAMA,CAAA;IACL,IAAI,CAACJ,UAAU,GAAG,KAAK;EACxB;;SAfYF,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAO,OAAA,EAAXP,MAAW,CAAAQ,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}