{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let SignInFormComponent = class SignInFormComponent {};\nSignInFormComponent = __decorate([Component({\n  selector: 'app-sign-in-form',\n  templateUrl: './sign-in-form.component.html',\n  styleUrls: ['./sign-in-form.component.scss']\n})], SignInFormComponent);\n() => {\n  this.showPassword = !this.showPassword;\n  this.input = this.showPassword ? 'text' : 'password';\n};\n// form validation\nloginForm = new FormGroup({\n  email: new FormControl('', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n  password: new FormControl('', Validators.required)\n});\n// send data to parent component?\nemailSubmitted = new EventEmitter();\npasswordSubmitted = new EventEmitter();\nerrorEmail = '';\nerrorEmailOrPassword = '';\nonSubmit();\n{\n  if (this.loginForm.valid) {\n    const email = this.loginForm.value.email;\n    this.emailSubmitted.emit(email);\n    const password = this.loginForm.value.password;\n    this.passwordSubmitted.emit(password);\n    console.log(this.loginForm.value);\n    try {\n      this.loginForm.reset();\n      this.errorEmail = '';\n    } catch (error) {\n      console.log(error);\n      this.errorEmailOrPassword = 'Invalid email or password';\n    }\n  } else {\n    const emailControl = this.loginForm.get('email');\n    if (emailControl && !emailControl.valid) {\n      this.errorEmail = 'Please provide a valid email';\n    }\n  }\n}","map":{"version":3,"names":["Component","EventEmitter","FormControl","FormGroup","Validators","SignInFormComponent","__decorate","selector","templateUrl","styleUrls","showPassword","input","loginForm","email","required","pattern","password","emailSubmitted","passwordSubmitted","errorEmail","errorEmailOrPassword","onSubmit","valid","value","emit","console","log","reset","error","emailControl","get"],"sources":["/Users/santiago.valenzuela/Desktop/Easy Media/frontend/src/app/sign-in-form/sign-in-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n\tselector: 'app-sign-in-form',\n\ttemplateUrl: './sign-in-form.component.html',\n\tstyleUrls: ['./sign-in-form.component.scss'],\n})\nexport class SignInFormComponent {\n\tconstructor(\n\t// show/hide password\n\tshowPassword = false;\n\tinput = 'password';\n\ttoggleShow() {\n\t\tthis.showPassword = !this.showPassword;\n\t\tthis.input = this.showPassword ? 'text' : 'password';\n\t}\n\n\t// form validation\n\tloginForm = new FormGroup({\n\t\temail: new FormControl('', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n\t\tpassword: new FormControl('', Validators.required),\n\t});\n\n\t// send data to parent component?\n\t@Output() emailSubmitted = new EventEmitter();\n\t@Output() passwordSubmitted = new EventEmitter();\n\n\terrorEmail = '';\n\terrorEmailOrPassword = '';\n\n\tonSubmit() {\n\t\tif (this.loginForm.valid) {\n\t\t\tconst email = this.loginForm.value.email;\n\t\t\tthis.emailSubmitted.emit(email);\n\n\t\t\tconst password = this.loginForm.value.password;\n\t\t\tthis.passwordSubmitted.emit(password);\n\n\t\t\tconsole.log(this.loginForm.value);\n\n\t\t\ttry{\n\t\t\t\tthis.loginForm.reset();\n\t\t\t\tthis.errorEmail = '';\n\t\t\t}\n\t\t\tcatch(error){\n\t\t\t\tconsole.log(error);\n\t\t\t\tthis.errorEmailOrPassword = 'Invalid email or password'\n\t\t\t}\n\t\t} else {\n\t\t\tconst emailControl = this.loginForm.get('email');\n\t\t\tif (emailControl && !emailControl.valid) {\n\t\t\t\tthis.errorEmail = 'Please provide a valid email';\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,QAAgB,eAAe;AAC/D,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAO5D,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB,GAKrB;AALEA,mBAAmB,GAAAC,UAAA,EAL/BN,SAAS,CAAC;EACVO,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC3C,CAAC,C,EACWJ,mBAAmB,CAKrB;AAAA,MAAE;EACX,IAAI,CAACK,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACtC,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,YAAY,GAAG,MAAM,GAAG,UAAU;AACrD,CAAC;AAED;AACAE,SAAS,GAAG,IAAIT,SAAS,CAAC;EACzBU,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACW,OAAO,CAAC,0CAA0C,CAAC,CAAC,CAAC;EACjHC,QAAQ,EAAE,IAAId,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,QAAQ;CACjD,CAAC;AAEF;AACUG,cAAc,GAAG,IAAIhB,YAAY,EAAE;AACnCiB,iBAAiB,GAAG,IAAIjB,YAAY,EAAE;AAEhDkB,UAAU,GAAG,EAAE;AACfC,oBAAoB,GAAG,EAAE;AAEzBC,QAAQ,EAAE;AAAC;EACV,IAAI,IAAI,CAACT,SAAS,CAACU,KAAK,EAAE;IACzB,MAAMT,KAAK,GAAG,IAAI,CAACD,SAAS,CAACW,KAAK,CAACV,KAAK;IACxC,IAAI,CAACI,cAAc,CAACO,IAAI,CAACX,KAAK,CAAC;IAE/B,MAAMG,QAAQ,GAAG,IAAI,CAACJ,SAAS,CAACW,KAAK,CAACP,QAAQ;IAC9C,IAAI,CAACE,iBAAiB,CAACM,IAAI,CAACR,QAAQ,CAAC;IAErCS,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,SAAS,CAACW,KAAK,CAAC;IAEjC,IAAG;MACF,IAAI,CAACX,SAAS,CAACe,KAAK,EAAE;MACtB,IAAI,CAACR,UAAU,GAAG,EAAE;KACpB,CACD,OAAMS,KAAK,EAAC;MACXH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;MAClB,IAAI,CAACR,oBAAoB,GAAG,2BAA2B;;GAExD,MAAM;IACN,MAAMS,YAAY,GAAG,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAAC,OAAO,CAAC;IAChD,IAAID,YAAY,IAAI,CAACA,YAAY,CAACP,KAAK,EAAE;MACxC,IAAI,CAACH,UAAU,GAAG,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}