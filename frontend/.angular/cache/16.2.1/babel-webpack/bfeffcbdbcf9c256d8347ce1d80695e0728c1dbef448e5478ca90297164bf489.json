{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NOTES } from 'src/notes';\nexport let MyMessagesComponent = class MyMessagesComponent {\n  constructor(messagesByIdService) {\n    this.messagesByIdService = messagesByIdService;\n    this.notes = NOTES;\n    this.search = '';\n    this.searchDate = '';\n  }\n  ngOnInit() {\n    this.messagesByIdService.getMessagesById().subscribe(res => {\n      this.notes = res.data;\n      // this.checkCookie();\n    }, error => {\n      console.log(error);\n    });\n  }\n  // search notes, filter by date and show results\n  searchNotesByDate() {\n    if (this.searchDate) {\n      const searchDate = new Date(this.searchDate); // assert this.searchDate as string\n      const searchDateString = `${searchDate.getUTCFullYear()}-${('0' + (searchDate.getUTCMonth() + 1)).slice(-2)}-${('0' + searchDate.getUTCDate()).slice(-2)}`;\n      this.notes = this.notes.filter(note => {\n        const noteDate = new Date(note.updatedAt); // create a new Date object from updatedAt\n        // adjust the noteDate by the timezone offset\n        noteDate.setMinutes(noteDate.getMinutes() - noteDate.getTimezoneOffset());\n        const noteDateString = `${noteDate.getUTCFullYear()}-${('0' + (noteDate.getUTCMonth() + 1)).slice(-2)}-${('0' + noteDate.getUTCDate()).slice(-2)}`;\n        return noteDateString === searchDateString;\n      });\n    } else {\n      this.ngOnInit();\n    }\n  }\n};\nMyMessagesComponent = __decorate([Component({\n  selector: 'app-my-messages',\n  templateUrl: './my-messages.component.html',\n  styleUrls: ['./my-messages.component.scss']\n})], MyMessagesComponent);","map":{"version":3,"names":["Component","NOTES","MyMessagesComponent","constructor","messagesByIdService","notes","search","searchDate","ngOnInit","getMessagesById","subscribe","res","data","error","console","log","searchNotesByDate","Date","searchDateString","getUTCFullYear","getUTCMonth","slice","getUTCDate","filter","note","noteDate","updatedAt","setMinutes","getMinutes","getTimezoneOffset","noteDateString","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/santiago.valenzuela/Desktop/Easy Media/frontend/src/app/pages/my-messages/my-messages.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MessagesByIdService } from 'src/app/services/messagesById/messages-by-id.service';\nimport { NOTES } from 'src/notes';\n\n@Component({\n\tselector: 'app-my-messages',\n\ttemplateUrl: './my-messages.component.html',\n\tstyleUrls: ['./my-messages.component.scss'],\n})\nexport class MyMessagesComponent {\n\tconstructor(private messagesByIdService: MessagesByIdService) {}\n\t\n\tngOnInit(): void {\n\t\tthis.messagesByIdService.getMessagesById().subscribe(\n\t\t\t(res: any) => {\n\t\t\t\tthis.notes = res.data;\n\t\t\t\t// this.checkCookie();\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t);\n\t}\n\n\tnotes = NOTES;\n\tsearch = '';\n\tsearchDate = '';\n\n\t// search notes, filter by date and show results\n\tsearchNotesByDate() {\n\t\tif (this.searchDate) {\n\t\t\tconst searchDate = new Date(this.searchDate as string); // assert this.searchDate as string\n\n\t\t\tconst searchDateString = `${searchDate.getUTCFullYear()}-${(\n\t\t\t\t'0' +\n\t\t\t\t(searchDate.getUTCMonth() + 1)\n\t\t\t).slice(-2)}-${('0' + searchDate.getUTCDate()).slice(-2)}`;\n\n\t\t\tthis.notes = this.notes.filter((note) => {\n\t\t\t\tconst noteDate = new Date(note.updatedAt as string); // create a new Date object from updatedAt\n\n\t\t\t\t// adjust the noteDate by the timezone offset\n\t\t\t\tnoteDate.setMinutes(\n\t\t\t\t\tnoteDate.getMinutes() - noteDate.getTimezoneOffset()\n\t\t\t\t);\n\n\t\t\t\tconst noteDateString = `${noteDate.getUTCFullYear()}-${(\n\t\t\t\t\t'0' +\n\t\t\t\t\t(noteDate.getUTCMonth() + 1)\n\t\t\t\t).slice(-2)}-${('0' + noteDate.getUTCDate()).slice(-2)}`;\n\n\t\t\t\treturn noteDateString === searchDateString;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.ngOnInit();\n\t\t}\n\t}\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,KAAK,QAAQ,WAAW;AAO1B,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAC/BC,YAAoBC,mBAAwC;IAAxC,KAAAA,mBAAmB,GAAnBA,mBAAmB;IAcvC,KAAAC,KAAK,GAAGJ,KAAK;IACb,KAAAK,MAAM,GAAG,EAAE;IACX,KAAAC,UAAU,GAAG,EAAE;EAhBgD;EAE/DC,QAAQA,CAAA;IACP,IAAI,CAACJ,mBAAmB,CAACK,eAAe,EAAE,CAACC,SAAS,CAClDC,GAAQ,IAAI;MACZ,IAAI,CAACN,KAAK,GAAGM,GAAG,CAACC,IAAI;MACrB;IACD,CAAC,EACAC,KAAK,IAAI;MACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACnB,CAAC,CACD;EACF;EAMA;EACAG,iBAAiBA,CAAA;IAChB,IAAI,IAAI,CAACT,UAAU,EAAE;MACpB,MAAMA,UAAU,GAAG,IAAIU,IAAI,CAAC,IAAI,CAACV,UAAoB,CAAC,CAAC,CAAC;MAExD,MAAMW,gBAAgB,GAAG,GAAGX,UAAU,CAACY,cAAc,EAAE,IAAI,CAC1D,GAAG,IACFZ,UAAU,CAACa,WAAW,EAAE,GAAG,CAAC,CAAC,EAC7BC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAGd,UAAU,CAACe,UAAU,EAAE,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAE1D,IAAI,CAAChB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACkB,MAAM,CAAEC,IAAI,IAAI;QACvC,MAAMC,QAAQ,GAAG,IAAIR,IAAI,CAACO,IAAI,CAACE,SAAmB,CAAC,CAAC,CAAC;QAErD;QACAD,QAAQ,CAACE,UAAU,CAClBF,QAAQ,CAACG,UAAU,EAAE,GAAGH,QAAQ,CAACI,iBAAiB,EAAE,CACpD;QAED,MAAMC,cAAc,GAAG,GAAGL,QAAQ,CAACN,cAAc,EAAE,IAAI,CACtD,GAAG,IACFM,QAAQ,CAACL,WAAW,EAAE,GAAG,CAAC,CAAC,EAC3BC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAGI,QAAQ,CAACH,UAAU,EAAE,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QAExD,OAAOS,cAAc,KAAKZ,gBAAgB;MAC3C,CAAC,CAAC;KACF,MAAM;MACN,IAAI,CAACV,QAAQ,EAAE;;EAEjB;CACA;AAhDYN,mBAAmB,GAAA6B,UAAA,EAL/B/B,SAAS,CAAC;EACVgC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC1C,CAAC,C,EACWhC,mBAAmB,CAgD/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}