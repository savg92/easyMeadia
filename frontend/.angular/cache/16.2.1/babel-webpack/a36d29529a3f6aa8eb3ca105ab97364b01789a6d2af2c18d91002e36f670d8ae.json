{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let SingUpFormComponent = class SingUpFormComponent {\n  constructor() {\n    // show/hide password\n    this.showPassword = false;\n    this.input = 'password';\n    this.input2 = 'password';\n    this.loginForm = new FormGroup({\n      fullName: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$')]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$')]),\n      confirmPassword: new FormControl('', Validators.required)\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    this.errorEmail = '';\n    this.fullNameSubmitted = new EventEmitter();\n    this.emailSubmitted = new EventEmitter();\n    this.passwordSubmitted = new EventEmitter();\n  }\n  toggleShow() {\n    this.showPassword = !this.showPassword;\n    this.input = this.showPassword ? 'text' : 'password';\n  }\n  toggleShow2() {\n    this.showPassword = !this.showPassword;\n    this.input2 = this.showPassword ? 'text' : 'password';\n  }\n  // form validation\n  passwordMatchValidator(control) {\n    const g = control;\n    return g.get('password')?.value === g.get('confirmPassword')?.value ? null : {\n      mismatch: true\n    };\n  }\n  onSubmit() {\n    if (this.loginForm.valid) {\n      const email = this.loginForm.value.email;\n      this.emailSubmitted.emit(email);\n      const password = this.loginForm.value.password;\n      this.passwordSubmitted.emit(password);\n      console.log(this.loginForm.value);\n    } else {\n      if (this.loginForm.errors?.['mismatch']) {\n        alert('Passwords do not match');\n      }\n      const emailControl = this.loginForm.get('email');\n      if (emailControl && !emailControl.valid) {\n        this.errorEmail = 'Please provide a valid email';\n      }\n    }\n  }\n};\n__decorate([Output()], SingUpFormComponent.prototype, \"fullNameSubmitted\", void 0);\n__decorate([Output()], SingUpFormComponent.prototype, \"emailSubmitted\", void 0);\n__decorate([Output()], SingUpFormComponent.prototype, \"passwordSubmitted\", void 0);\nSingUpFormComponent = __decorate([Component({\n  selector: 'app-sing-up-form',\n  templateUrl: './sing-up-form.component.html',\n  styleUrls: ['./sing-up-form.component.scss']\n})], SingUpFormComponent);","map":{"version":3,"names":["Component","EventEmitter","Output","FormGroup","FormControl","Validators","SingUpFormComponent","constructor","showPassword","input","input2","loginForm","fullName","required","email","pattern","password","minLength","confirmPassword","validators","passwordMatchValidator","errorEmail","fullNameSubmitted","emailSubmitted","passwordSubmitted","toggleShow","toggleShow2","control","g","get","value","mismatch","onSubmit","valid","emit","console","log","errors","alert","emailControl","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/santiago.valenzuela/Desktop/Easy Media/frontend/src/app/sing-up-form/sing-up-form.component.ts"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport {\n\tAbstractControl,\n\tFormGroup,\n\tFormControl,\n\tValidators,\n} from '@angular/forms';\n@Component({\n\tselector: 'app-sing-up-form',\n\ttemplateUrl: './sing-up-form.component.html',\n\tstyleUrls: ['./sing-up-form.component.scss'],\n})\nexport class SingUpFormComponent {\n\t// show/hide password\n\tshowPassword = false;\n\tinput = 'password';\n\tinput2 = 'password';\n\n\ttoggleShow() {\n\t\tthis.showPassword = !this.showPassword;\n\t\tthis.input = this.showPassword ? 'text' : 'password';\n\t}\n\n\ttoggleShow2() {\n\t\tthis.showPassword = !this.showPassword;\n\t\tthis.input2 = this.showPassword ? 'text' : 'password';\n\t}\n\n\t// form validation\n\tpasswordMatchValidator(control: AbstractControl) {\n\t\tconst g = control as FormGroup;\n\t\treturn g.get('password')?.value === g.get('confirmPassword')?.value\n\t\t\t? null\n\t\t\t: { mismatch: true };\n\t}\n\n\tloginForm = new FormGroup(\n\t\t{\n\t\t\tfullName: new FormControl('', Validators.required),\n\t\t\temail: new FormControl('', [\n\t\t\t\tValidators.required,\n\t\t\t\tValidators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$'),\n\t\t\t]),\n\t\t\tpassword: new FormControl('', [\n\t\t\t\tValidators.required,\n\t\t\t\tValidators.minLength(8),\n\t\t\t\tValidators.pattern(\n\t\t\t\t\t'^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$'\n\t\t\t\t),\n\t\t\t]),\n\t\t\tconfirmPassword: new FormControl('', Validators.required),\n\t\t},\n\t\t{ validators: this.passwordMatchValidator }\n\t);\n\n\terrorEmail = '';\n\n\t@Output() fullNameSubmitted = new EventEmitter();\n\t@Output() emailSubmitted = new EventEmitter();\n\t@Output() passwordSubmitted = new EventEmitter();\n\n\tonSubmit() {\n\t\tif (this.loginForm.valid) {\n\t\t\tconst email = this.loginForm.value.email;\n\t\t\tthis.emailSubmitted.emit(email);\n\n\t\t\tconst password = this.loginForm.value.password;\n\t\t\tthis.passwordSubmitted.emit(password);\n\n\t\t\tconsole.log(this.loginForm.value);\n\t\t} else {\n\t\t\tif (this.loginForm.errors?.['mismatch']) {\n\t\t\t\talert('Passwords do not match');\n\t\t\t}\n\t\t\tconst emailControl = this.loginForm.get('email');\n\t\t\tif (emailControl && !emailControl.valid) {\n\t\t\t\tthis.errorEmail = 'Please provide a valid email';\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}